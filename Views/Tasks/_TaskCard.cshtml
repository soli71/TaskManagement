@model TaskManagementMvc.Models.TaskItem

<style>
.task-card {
    background: white;
    border-radius: 12px;
    margin-bottom: 12px;
    border: 1px solid #e9ecef;
    position: relative;
    cursor: move;
    transition: all 0.2s ease;
    overflow: hidden;
}

.task-card:hover {
    box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    transform: translateY(-1px);
}

.task-card.dragging {
    opacity: 0.5;
    transform: rotate(5deg);
}

.task-priority-stripe {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
}

.priority-low { background: #28a745; }
.priority-medium { background: #ffc107; }
.priority-high { background: #fd7e14; }
.priority-critical { background: #dc3545; }

.task-header {
    padding: 16px 16px 8px 16px;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
}

.task-id {
    color: #6c757d;
    font-size: 12px;
    font-weight: 500;
}

.task-menu {
    position: relative;
}

.task-menu-btn {
    background: none;
    border: none;
    color: #6c757d;
    font-size: 16px;
    cursor: pointer;
    padding: 6px 8px;
    border-radius: 6px;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.task-menu-btn:hover {
    background: rgba(108, 117, 125, 0.1);
    color: #495057;
    transform: scale(1.1);
}

.task-dropdown {
    position: absolute;
    top: calc(100% + 4px);
    right: 0;
    background: white;
    border: 1px solid #e0e6ed;
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.12), 0 4px 8px rgba(0,0,0,0.08);
    z-index: 1000;
    min-width: 160px;
    display: none;
    overflow: hidden;
    animation: dropdownSlide 0.15s ease-out;
}

@@keyframes dropdownSlide {
    from {
        opacity: 0;
        transform: translateY(-8px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.task-dropdown.show {
    display: block;
}

.dropdown-item {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 12px 16px;
    color: #374151;
    text-decoration: none;
    border: none;
    background: none;
    text-align: right;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
    gap: 8px;
}

.dropdown-item i {
    font-size: 16px;
    width: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.dropdown-item:hover {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    color: #1e293b;
    padding-right: 20px;
}

.dropdown-item.text-danger {
    color: #dc2626;
}

.dropdown-item.text-danger:hover {
    background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
    color: #b91c1c;
    padding-right: 20px;
}

.dropdown-item.text-danger i {
    color: #dc2626;
}

.task-title {
    font-size: 16px;
    font-weight: 600;
    color: #1a1a1a;
    margin: 8px 16px;
    line-height: 1.4;
}

.task-labels {
    padding: 0 16px 8px 16px;
    display: flex;
    gap: 6px;
    flex-wrap: wrap;
}

.task-label {
    background: #e3f2fd;
    color: #1565c0;
    font-size: 11px;
    font-weight: 500;
    padding: 4px 8px;
    border-radius: 12px;
    text-transform: uppercase;
}

.task-progress {
    padding: 8px 16px;
}

.progress-bar-custom {
    height: 6px;
    background: #e9ecef;
    border-radius: 3px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
    border-radius: 3px;
    transition: width 0.3s ease;
}

.task-footer {
    padding: 12px 16px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #f8f9fa;
    border-top: 1px solid #e9ecef;
}

.task-stats {
    display: flex;
    gap: 12px;
    font-size: 12px;
    color: #6c757d;
}

.stat-item {
    display: flex;
    align-items: center;
    gap: 4px;
}

.task-sp {
    font-size: 14px;
    font-weight: 600;
    color: #495057;
}
</style>

@{
    var priorityClass = Model.Priority switch
    {
        TaskManagementMvc.Models.TaskPriority.Low => "priority-low",
        TaskManagementMvc.Models.TaskPriority.Medium => "priority-medium", 
        TaskManagementMvc.Models.TaskPriority.High => "priority-high",
        TaskManagementMvc.Models.TaskPriority.Critical => "priority-critical",
        _ => "priority-medium"
    };
    
    var progressPercentage = Model.Status switch
    {
        TaskManagementMvc.Models.TaskStatus.NotStarted => 0,
        TaskManagementMvc.Models.TaskStatus.InProgress => 50,
        TaskManagementMvc.Models.TaskStatus.Completed => 100,
        _ => 0
    };
}

<div class="task-card" draggable="true" data-task-id="@Model.Id" title="دبل کلیک برای ویرایش">
    <div class="task-priority-stripe @priorityClass"></div>
    
    <div class="task-header">
        <span class="task-id">#@Model.Id</span>
        <div class="task-menu">
            <button class="task-menu-btn" onclick="toggleDropdown(this)" title="منو">
                <i class="bi bi-three-dots-vertical"></i>
            </button>
            <div class="task-dropdown">
                <button class="dropdown-item" onclick="editTask(@Model.Id)">
                    <i class="bi bi-pencil"></i>
                    <span>ویرایش تسک</span>
                </button>
                <button class="dropdown-item" onclick="viewTask(@Model.Id)">
                    <i class="bi bi-eye"></i>
                    <span>مشاهده جزئیات</span>
                </button>
                <div style="height: 1px; background: #e5e7eb; margin: 4px 12px;"></div>
                <button class="dropdown-item text-danger" onclick="deleteTask(@Model.Id)">
                    <i class="bi bi-trash"></i>
                    <span>حذف تسک</span>
                </button>
            </div>
        </div>
    </div>
    
    <div class="task-title">@Model.Title</div>
    
    <div class="task-labels">
        <span class="task-label">@Model.Priority.ToString().ToUpper()</span>
        @if (Model.Project != null && !string.IsNullOrEmpty(Model.Project.Name))
        {
            <span class="task-label" style="background: #fff3cd; color: #856404;">@Model.Project.Name</span>
        }
    </div>
    
    <div class="task-progress">
        <div class="progress-bar-custom">
            <div class="progress-fill" style="width: @progressPercentage%"></div>
        </div>
    </div>
    
    <div class="task-footer">
        <div class="task-stats">
            <div class="stat-item">
                <i class="bi bi-clock"></i>
                <span>@(Model.OriginalEstimateHours?.ToString("0") ?? "0")ساعت</span>
            </div>
            <div class="stat-item">
                <i class="bi bi-calendar"></i>
                <span>@Model.CreatedAt.ToString("MM/dd")</span>
            </div>
        </div>
        <div class="task-sp">@(Model.OriginalEstimateHours?.ToString("0") ?? "0") SP</div>
    </div>
</div>

<script>
function toggleDropdown(button) {
    const dropdown = button.nextElementSibling;
    
    // Close all other dropdowns
    document.querySelectorAll('.task-dropdown.show').forEach(d => {
        if (d !== dropdown) d.classList.remove('show');
    });
    
    // Toggle current dropdown
    const isShowing = dropdown.classList.contains('show');
    if (isShowing) {
        dropdown.classList.remove('show');
    } else {
        dropdown.classList.add('show');
        
        // Position dropdown to ensure it's visible
        const rect = dropdown.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        
        if (rect.right > viewportWidth) {
            dropdown.style.right = '0';
            dropdown.style.left = 'auto';
        }
        
        if (rect.bottom > viewportHeight) {
            dropdown.style.top = 'auto';
            dropdown.style.bottom = '100%';
        }
    }
}

// Close dropdowns when clicking outside
document.addEventListener('click', function(e) {
    if (!e.target.closest('.task-menu')) {
        document.querySelectorAll('.task-dropdown.show').forEach(d => {
            d.classList.remove('show');
        });
    }
});

// Close dropdown when pressing Escape
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        document.querySelectorAll('.task-dropdown.show').forEach(d => {
            d.classList.remove('show');
        });
    }
});

async function deleteTask(id) {
    if (!confirm('آیا از حذف این تسک اطمینان دارید؟')) return;
    
    try {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        const formData = new FormData();
        formData.append('id', id);
        
        const response = await fetch('@Url.Action("Delete", "Tasks")', {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                ...(token ? { 'RequestVerificationToken': token } : {})
            },
            body: formData
        });
        
        if (response.ok) {
            const card = document.querySelector(`[data-task-id="${id}"]`);
            if (card) {
                card.style.transition = 'all 0.3s ease';
                card.style.transform = 'scale(0)';
                card.style.opacity = '0';
                setTimeout(() => card.remove(), 300);
            }
            showNotification('تسک حذف شد', 'success');
        } else {
            throw new Error('Failed to delete');
        }
    } catch (error) {
        showNotification('خطا در حذف تسک', 'error');
    }
}

function viewTask(id) {
    // Navigate to task details page
    window.location.href = `@Url.Action("Details", "Tasks")/${id}`;
}
</script>
