@using TaskManagementMvc.Models
@using TaskManagementMvc.Models.ViewModels
@model InvoiceCreateViewModel
@{
    ViewData["Title"] = "صدور صورتحساب";
    var tasks = Model.Tasks ?? new List<TaskSelectionViewModel>();
}

<div class="container-fluid px-3">
    <div class="row">
        <div class="col-12">
            <!-- Header Section -->
            <div class="card border-0 shadow-sm mb-3">
                <div class="card-header bg-gradient-primary text-white">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center gap-2">
                            <i class="bi bi-receipt-cutoff fs-4"></i>
                            <div>
                                <h4 class="mb-0">صدور صورتحساب جدید</h4>
                                <small class="text-white-75">ایجاد فاکتور از تسک‌های انجام شده</small>
                            </div>
                        </div>
                        <div class="bg-white bg-opacity-20 rounded-pill px-3 py-1">
                            <span class="fw-medium">تسک‌های انتخاب‌شده: </span>
                            <span id="selectedCount" class="badge bg-white text-primary rounded-pill">0</span>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Main Content -->
            <form asp-action="Create" method="post" id="invoiceCreateForm">
                @if (!ViewData.ModelState.IsValid)
                {
                    <div class="alert alert-danger border-0 shadow-sm mb-4">
                        <div class="d-flex align-items-start gap-2">
                            <i class="bi bi-exclamation-triangle-fill text-danger"></i>
                            <div>
                                <strong>خطاهای زیر رخ داده است:</strong>
                                <ul class="mb-0 mt-1">
                                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                    {
                                        <li>@error.ErrorMessage</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                }

                <!-- Invoice Information Card -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-light border-0">
                        <h5 class="mb-0 d-flex align-items-center gap-2">
                            <i class="bi bi-info-circle text-primary"></i>
                            اطلاعات فاکتور
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <corp-input asp-for="InvoiceDate" type="date" placeholder="تاریخ فاکتور" dense required icon="bi-calendar-date"></corp-input>
                            </div>
                            <div class="col-md-4">
                                <corp-input asp-for="CustomerName" placeholder="نام مشتری" dense required icon="bi-person-circle"></corp-input>
                            </div>
                            <div class="col-md-4">
                                <div class="corp-field corp-dense">
                                    <label class="form-label corp-label">وضعیت فاکتور</label>
                                    <div class="corp-input-raw">
                                        <div class="input-group">
                                            <span class="input-group-text bg-light border-end-0">
                                                <i class="bi bi-clipboard-check text-muted"></i>
                                            </span>
                                            <input type="text" class="form-control border-start-0" value="پیش‌نویس" readonly>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="corp-field corp-dense">
                                    <label asp-for="Description" class="form-label corp-label">توضیحات</label>
                                    <div class="corp-input-raw">
                                        <textarea asp-for="Description" rows="3" class="form-control corp-input corp-input-dense" placeholder="توضیحات اضافی در مورد این فاکتور..."></textarea>
                                    </div>
                                    <span class="text-danger corp-validation" data-valmsg-for="Description" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Tasks Selection -->
                <div class="row g-4">
                    <div class="col-lg-8">
                        <div class="card border-0 shadow-sm">
                            <div class="card-header bg-light border-0">
                                <div class="d-flex align-items-center justify-content-between">
                                    <h5 class="mb-0 d-flex align-items-center gap-2">
                                        <i class="bi bi-list-task text-primary"></i>
                                        انتخاب تسک‌ها
                                    </h5>
                                    <span class="badge bg-info text-dark">@tasks.Count(t => t.HoursAvailable > 0) تسک قابل فاکتور</span>
                                </div>
                                <p class="text-muted small mb-0 mt-2">
                                    <i class="bi bi-info-circle me-1"></i>
                                    فقط تسک‌هایی که زمان واقعی انجام کار دارند قابل فاکتور هستند.
                                </p>
                            </div>
                            <div class="card-body p-0">
                                @if (tasks.Any())
                                {
                                    <div class="list-group list-group-flush" id="taskList">
                                        @for (int i = 0; i < tasks.Count; i++)
                                        {
                                            var t = tasks[i];
                                            var hasWorkTime = t.HoursAvailable > 0;
                                            var workTimeText = hasWorkTime ? $"{t.HoursAvailable} ساعت" : "زمان انجام کار ثبت نشده";
                                            var isDisabled = !hasWorkTime;
                                            
                                            <label class="list-group-item list-group-item-action task-item border-0 @(isDisabled ? "disabled bg-light" : "")" 
                                                   data-task-id="@t.TaskId" data-task-title="@t.Title">
                                                
                                                <!-- Hidden Fields -->
                                                <input type="hidden" name="Tasks[@i].TaskId" value="@t.TaskId" />
                                                <input type="hidden" name="Tasks[@i].Title" value="@t.Title" />
                                                <input type="hidden" name="Tasks[@i].Description" value="@t.Description" />
                                                <input type="hidden" name="Tasks[@i].HoursAvailable" value="@t.HoursAvailable" />
                                                <input type="hidden" name="Tasks[@i].PerformerName" value="@t.PerformerName" />
                                                <input type="hidden" name="Tasks[@i].StartAt" value="@t.StartAt?.ToString("o")" />
                                                
                                                <div class="d-flex align-items-start gap-3">
                                                    <div class="form-check mt-1">
                                                        <input type="checkbox" name="Tasks[@i].Selected" value="true" 
                                                               class="form-check-input" @(t.Selected ? "checked" : "") @(isDisabled ? "disabled" : "") />
                                                    </div>
                                                    
                                                    <div class="flex-grow-1">
                                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                                            <h6 class="mb-0 @(isDisabled ? "text-muted" : "text-dark")">@t.Title</h6>
                                                            <span class="badge @(hasWorkTime ? "bg-success-subtle text-success" : "bg-warning-subtle text-warning") ms-2">
                                                                <i class="bi bi-clock me-1"></i>@workTimeText
                                                            </span>
                                                        </div>
                                                        
                                                        @if (!string.IsNullOrEmpty(t.Description))
                                                        {
                                                            <p class="text-muted small mb-2">@t.Description</p>
                                                        }
                                                        
                                                        <div class="d-flex justify-content-between align-items-center text-muted small">
                                                            <div class="d-flex gap-3">
                                                                <span><i class="bi bi-person-fill me-1"></i>@(t.PerformerName ?? "تخصیص داده نشده")</span>
                                                                @if (t.StartAt.HasValue)
                                                                {
                                                                    <span><i class="bi bi-calendar-event me-1"></i>@t.StartAt.Value.ToPersianDate()</span>
                                                                }
                                                            </div>
                                                        </div>
                                                        
                                                        @if (hasWorkTime)
                                                        {
                                                            <div class="mt-3 p-2 bg-light rounded">
                                                                <div class="row g-2 align-items-center">
                                                                    <div class="col-auto">
                                                                        <label class="col-form-label col-form-label-sm fw-medium">ساعت برای فاکتور:</label>
                                                                    </div>
                                                                    <div class="col-auto">
                                                                        <input type="number" step="0.25" min="0" max="@t.HoursAvailable" 
                                                                               class="form-control form-control-sm invoice-hours-input" 
                                                                               name="Tasks[@i].HoursForInvoice" value="@t.HoursForInvoice" 
                                                                               style="width:100px" />
                                                                    </div>
                                                                    <div class="col-auto">
                                                                        <button type="button" class="btn btn-sm btn-outline-secondary reset-hours" 
                                                                                data-original="@t.HoursAvailable" title="بازنشانی به کل ساعات">
                                                                            <i class="bi bi-arrow-clockwise"></i>
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </label>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="p-4 text-center">
                                        <div class="text-muted">
                                            <i class="bi bi-inbox display-4 d-block mb-3"></i>
                                            <h6>هیچ تسک قابل فاکتوری وجود ندارد</h6>
                                            <p class="small mb-0">تسک‌های تکمیل شده با زمان ثبت شده برای صدور فاکتور در دسترس نیست.</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Selected Tasks Panel -->
                    <div class="col-lg-4">
                        <div class="position-sticky" style="top: 20px;">
                            <div id="selectedPanel" class="card border-0 shadow-sm">
                                <div class="card-header bg-gradient text-white" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0 fw-medium">
                                            <i class="bi bi-check2-square me-2"></i>
                                            تسک‌های انتخاب‌شده
                                        </h6>
                                        <span class="badge bg-white text-dark rounded-pill" id="selectedPanelCount">0</span>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div id="selectedChips" class="d-flex flex-wrap gap-2 mb-3"></div>
                                    <div id="selectedEmpty" class="text-center text-muted py-4">
                                        <i class="bi bi-hand-index display-6 d-block mb-2 text-muted"></i>
                                        <small>تسک‌های مورد نظر خود را انتخاب کنید</small>
                                    </div>
                                </div>
                                <div class="card-footer bg-light border-0">
                                    <div class="d-grid gap-2">
                                        @if (tasks.Any(t => t.HoursAvailable > 0))
                                        {
                                            <corp-btn variant="success" icon="bi-receipt-cutoff" dense type="submit" id="submitBtn">
                                                صدور فاکتور
                                            </corp-btn>
                                        }
                                        else
                                        {
                                            <corp-btn variant="secondary" icon="bi-receipt-cutoff" dense type="button" disabled>
                                                فاکتور قابل صدور نیست
                                            </corp-btn>
                                        }
                                        <corp-btn variant="outline-secondary" icon="bi-arrow-right" asp-action="Index" dense type="button">
                                            بازگشت به لیست
                                        </corp-btn>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Quick Stats -->
                            <div class="card border-0 shadow-sm mt-3">
                                <div class="card-body p-3">
                                    <div class="text-center">
                                        <div class="row g-0 text-center">
                                            <div class="col">
                                                <div class="text-primary fw-bold">@tasks.Count</div>
                                                <small class="text-muted">کل تسک‌ها</small>
                                            </div>
                                            <div class="col border-start">
                                                <div class="text-success fw-bold">@tasks.Count(t => t.HoursAvailable > 0)</div>
                                                <small class="text-muted">قابل فاکتور</small>
                                            </div>
                                            <div class="col border-start">
                                                <div class="text-info fw-bold">@tasks.Sum(t => t.HoursAvailable)</div>
                                                <small class="text-muted">کل ساعات</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
/* Enhanced Animations */
.fly-chip {
    position: fixed;
    z-index: 9999;
    padding: .4rem .8rem;
    border-radius: 999px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    pointer-events: none;
    transform: translate(-50%, -50%);
    transition: all 400ms cubic-bezier(.22,1,.36,1);
    rotate: -8deg;
    scale: 1.1;
    font-size: 0.875rem;
    font-weight: 500;
}

.selected-chip {
    display: inline-flex; 
    align-items: center; 
    gap: .4rem;
    padding: .4rem .8rem; 
    border-radius: 999px;
    background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
    color: #1976d2;
    border: 1px solid #bbdefb;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 200ms ease;
}

.selected-chip:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.selected-chip .btn-close { 
    filter: invert(24%) sepia(94%) saturate(1626%) hue-rotate(227deg) brightness(91%) contrast(90%); 
    opacity: .6;
    width: 12px;
    height: 12px;
}

.selected-chip .btn-close:hover { 
    opacity: 1;
    transform: scale(1.1);
}

/* Enhanced Pulse Animation */
.pulse-target { 
    animation: chipPulse 500ms ease-out; 
}

@@keyframes chipPulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.02); box-shadow: 0 0 20px rgba(102, 126, 234, 0.3); }
    100% { transform: scale(1); }
}

/* Task Item Enhancements */
.task-item {
    transition: all 200ms ease;
    cursor: pointer;
}

.task-item:hover:not(.disabled) {
    background-color: var(--bs-primary-bg-subtle) !important;
    border-color: var(--bs-primary-border-subtle) !important;
}

.task-item.disabled {
    cursor: not-allowed;
    opacity: 0.6;
}

.task-item input[type="checkbox"] {
    transform: scale(1.1);
}

/* Card Enhancements */
.bg-gradient-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
}

.card {
    transition: all 200ms ease;
}

.card:hover {
    transform: translateY(-1px);
}

/* Stats Enhancement */
.text-primary.fw-bold {
    font-size: 1.25rem;
}

/* Button Enhancements */
#submitBtn:disabled {
    cursor: not-allowed;
}

/* Loading State */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255,255,255,0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
}

.spinner-grow {
    width: 3rem;
    height: 3rem;
}
</style>

<script>
(function(){
  document.addEventListener('DOMContentLoaded', function(){
    const chipsWrap = document.getElementById('selectedChips');
    const emptyHint = document.getElementById('selectedEmpty');
    const countTop = document.getElementById('selectedCount');
    const countPanel = document.getElementById('selectedPanelCount');
    const panel = document.getElementById('selectedPanel');

    // Track last mouse position
    const lastMouse = { x: window.innerWidth/2, y: window.innerHeight/2 };
    document.addEventListener('mousemove', (e)=>{ lastMouse.x = e.clientX; lastMouse.y = e.clientY; }, { passive: true });

    function updateCounts() {
      const n = chipsWrap.querySelectorAll('.selected-chip').length;
      countTop.textContent = n;
      countPanel.textContent = n;
      emptyHint.style.display = n === 0 ? '' : 'none';
    }

    function addChip(taskId, title) {
      const chip = document.createElement('span');
      chip.className = 'selected-chip';
      chip.dataset.taskId = taskId;
      chip.innerHTML = `<i class=\"bi bi-check2-circle\"></i><span>${title}</span><button type=\"button\" class=\"btn-close btn-sm ms-1\" aria-label=\"Remove\"></button>`;
            chip.querySelector('.btn-close').addEventListener('click', function(){
                const checkbox = document.querySelector(`.task-item[data-task-id='${taskId}'] input[type=checkbox][name$='.Selected']`);
                if (checkbox) { checkbox.checked = false; }
                chip.remove();
                updateCounts();
            });
      chipsWrap.appendChild(chip);
      updateCounts();
      panel.classList.add('pulse-target');
      setTimeout(()=>panel.classList.remove('pulse-target'), 420);
    }

    function removeChip(taskId) {
      const chip = chipsWrap.querySelector(`.selected-chip[data-task-id=\"${taskId}\"]`);
      if (chip) { chip.remove(); updateCounts(); }
    }

    function flyToPanelFromMouse(text, fallbackEl) {
      const targetRect = chipsWrap.getBoundingClientRect();
      const origin = { x: lastMouse.x, y: lastMouse.y };
      if (!Number.isFinite(origin.x) || !Number.isFinite(origin.y)) {
        const rect = fallbackEl?.getBoundingClientRect();
        origin.x = rect ? (rect.left + rect.width/2) : window.innerWidth/2;
        origin.y = rect ? (rect.top + rect.height/2) : window.innerHeight/2;
      }
      const fly = document.createElement('div');
      fly.className = 'fly-chip';
      fly.textContent = text;
      document.body.appendChild(fly);
      fly.style.left = `${origin.x}px`;
      fly.style.top = `${origin.y}px`;
      requestAnimationFrame(() => {
        const dx = (targetRect.left + 12) - origin.x; // slight inset
        const dy = (targetRect.top + 12) - origin.y;
        fly.style.transform = `translate(${dx}px, ${dy}px)`;
        fly.style.opacity = '0.2';
        fly.style.rotate = '6deg';
        fly.style.scale = '0.92';
      });
      setTimeout(()=> fly.remove(), 420);
    }

    document.querySelectorAll('input[type="checkbox"][name$=".Selected"]').forEach(cb => {
      cb.addEventListener('change', function(){
        const label = this.closest('.task-item');
        const taskId = label?.dataset?.taskId;
        const title = label?.dataset?.taskTitle || '';
        if (!taskId) return;
        if (this.checked) {
            flyToPanelFromMouse(title, label);
            if (!chipsWrap.querySelector(`.selected-chip[data-task-id="${taskId}"]`)) {
              addChip(taskId, title);
            }
        } else {
            removeChip(taskId);
        }
      });
    });

    // Reset hour buttons
    document.querySelectorAll('.reset-hours').forEach(btn => {
        btn.addEventListener('click', function(){
            const original = this.getAttribute('data-original');
            const input = this.closest('.row')?.querySelector('.invoice-hours-input');
            if(input && original){ input.value = original; }
        });
    });

    updateCounts();
  });
})();
</script>
